--
-- Create Schema Script 
--   Database Version   : 11.2.0.2.0 
--   TOAD Version       : 9.6.0.27 
--   DB Connect String  : vs-oracle-cid:1521/CIDD2 
--   Schema             : PMSI 
--   Script Created by  : SYSTEM 
--   Script Created at  : 13/01/2021 21:48:20 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   Indexes: 51        Columns: 58         
--   Tables: 40         Columns: 753        
--   Views: 37          


CREATE TABLE MCO_RSA_ACTES
(
  CLE_RSA    VARCHAR2(10 BYTE),
  NSEQRUM    VARCHAR2(10 BYTE),
  DELAI      INTEGER,
  CDCCAM     VARCHAR2(7 BYTE),
  PHASE      VARCHAR2(1 BYTE),
  ACT        VARCHAR2(1 BYTE),
  EXTDOC     VARCHAR2(20 BYTE),
  MODIF      VARCHAR2(20 BYTE),
  RMBTEXCEP  VARCHAR2(20 BYTE),
  ASSONP     VARCHAR2(20 BYTE),
  NBEXEC     INTEGER,
  INDVAL     VARCHAR2(20 BYTE),
  ANSOR      VARCHAR2(4 BYTE),
  NORSS      VARCHAR2(20 BYTE),
  NAS        VARCHAR2(20 BYTE),
  DESCRI     VARCHAR2(2 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RSA_RSA
(
  NOFINESS                    VARCHAR2(9 BYTE),
  NOVRSA                      VARCHAR2(3 BYTE),
  CLE_RSA                     VARCHAR2(10 BYTE),
  NOVRSS                      VARCHAR2(3 BYTE),
  NOSEQTA                     VARCHAR2(3 BYTE),
  GPVCLASS                    VARCHAR2(2 BYTE),
  GPCMD                       VARCHAR2(2 BYTE),
  GPTYPE                      VARCHAR2(1 BYTE),
  GPNUM                       VARCHAR2(2 BYTE),
  GPCOMPX                     VARCHAR2(1 BYTE),
  GPCDRETR                    VARCHAR2(3 BYTE),
  RSAVCLASS                   VARCHAR2(2 BYTE),
  RSACMD                      VARCHAR2(2 BYTE),
  RSATYPE                     VARCHAR2(1 BYTE),
  RSANUM                      VARCHAR2(2 BYTE),
  RSACOMPX                    VARCHAR2(1 BYTE),
  RSACDRETR                   VARCHAR2(3 BYTE),
  NBRUM                       INTEGER,
  AGEAN                       INTEGER,
  AGEJR                       INTEGER,
  SEXE                        VARCHAR2(1 BYTE),
  ECHPMSI                     VARCHAR2(1 BYTE),
  PROV                        VARCHAR2(1 BYTE),
  MOISSOR                     VARCHAR2(2 BYTE),
  ANSOR                       VARCHAR2(4 BYTE),
  SCHPMSI                     VARCHAR2(1 BYTE),
  DEST                        VARCHAR2(1 BYTE),
  TYPESEJ                     VARCHAR2(1 BYTE),
  DUREE                       INTEGER,
  CDGEO                       VARCHAR2(5 BYTE),
  POIDS                       INTEGER,
  AGEGEST                     INTEGER,
  DELAIREG                    INTEGER,
  NBSEANCE                    INTEGER,
  NOGHS                       VARCHAR2(4 BYTE),
  NBJRBS                      INTEGER,
  SEJINFBI                    VARCHAR2(1 BYTE),
  NBJREXB                     INTEGER,
  UHCD                        VARCHAR2(1 BYTE),
  CONFCDSEJ                   VARCHAR2(1 BYTE),
  NBAUTPGV                    INTEGER,
  NBSUPHS                     INTEGER,
  NBSUPAHS                    INTEGER,
  NBSUPCHS                    INTEGER,
  NBSUPEHS                    INTEGER,
  NBACTE9615                  INTEGER,
  NBSUPREAPED                 INTEGER,
  NBSUPATPART                 INTEGER,
  NB_RDTH                     INTEGER,
  VALVAORT                    VARCHAR2(1 BYTE),
  NBSUPCAISSON                INTEGER,
  TYPRESTPO                   VARCHAR2(1 BYTE),
  NBSUPREA                    INTEGER,
  NBSUPSI                     INTEGER,
  NBSUPSTF                    INTEGER,
  NBSUPSRC                    INTEGER,
  NBSUPNN1                    INTEGER,
  NBSUPNN2                    INTEGER,
  NBSUPNN3                    INTEGER,
  NBSUPREP                    INTEGER,
  PASLITSP                    VARCHAR2(1 BYTE),
  TYPMACHRADIO                VARCHAR2(1 BYTE),
  TYPEDOSIM                   VARCHAR2(1 BYTE),
  NUMINNO                     VARCHAR2(20 BYTE),
  NBFAISC                     INTEGER,
  NOSEQRUM                    VARCHAR2(10 BYTE),
  DP                          VARCHAR2(6 BYTE),
  DR                          VARCHAR2(6 BYTE),
  NDAS                        INTEGER,
  NA                          INTEGER,
  GHM                         VARCHAR2(255 BYTE),
  ANSEQTA                     VARCHAR2(255 BYTE),
  TYPGLOB                     VARCHAR2(255 BYTE),
  RDTH                        VARCHAR2(255 BYTE),
  NORSS                       VARCHAR2(255 BYTE),
  NAS                         VARCHAR2(255 BYTE),
  GHSMINORE                   VARCHAR2(255 BYTE),
  GENAUTORSA                  VARCHAR2(255 BYTE),
  NBIVG                       VARCHAR2(255 BYTE),
  ANIVGPREC                   VARCHAR2(255 BYTE),
  NBNAISSANCE                 VARCHAR2(255 BYTE),
  TOPADMNAIS                  VARCHAR2(255 BYTE),
  TOPRADAVASTIN               VARCHAR2(255 BYTE),
  TOPRADALIMTA                VARCHAR2(255 BYTE),
  GHSHORSINNO                 VARCHAR2(255 BYTE),
  SUPPDEFCARD                 VARCHAR2(255 BYTE),
  CONVERSION_HC               VARCHAR2(255 BYTE),
  PC_RAAC                     VARCHAR2(255 BYTE),
  ADMISSION_MAISON_NAISSANCE  VARCHAR2(255 BYTE),
  ELL_FORF_DIABETE            VARCHAR2(255 BYTE),
  CDPOSTAL                    VARCHAR2(255 BYTE),
  ELL_GRADATION               VARCHAR2(255 BYTE),
  SURVEILLANCE_PARTICULIERE   VARCHAR2(255 BYTE),
  RESERERVE_HOSP              VARCHAR2(255 BYTE),
  RESCRIT_TARIFAIRE           VARCHAR2(255 BYTE),
  CAT_NB_INTERVENANTS         VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RSA_UM
(
  CLE_RSA       VARCHAR2(10 BYTE),
  NSEQRUM       VARCHAR2(10 BYTE),
  DPUM          VARCHAR2(6 BYTE),
  DRUM          VARCHAR2(6 BYTE),
  IGS2          VARCHAR2(3 BYTE),
  NBDIAGAS      INTEGER,
  NBACTE        INTEGER,
  DUREESEJPART  INTEGER,
  NOHOP1        VARCHAR2(9 BYTE),
  TYPAUT1       VARCHAR2(4 BYTE),
  NATSUPP1      VARCHAR2(4 BYTE),
  NBSUPP1       INTEGER,
  NOHOP2        VARCHAR2(9 BYTE),
  TYPAUT2       VARCHAR2(4 BYTE),
  NATSUPP2      VARCHAR2(4 BYTE),
  NBSUPP2       VARCHAR2(4 BYTE),
  ANSOR         VARCHAR2(4 BYTE),
  NORSS         VARCHAR2(10 BYTE),
  NAS           VARCHAR2(20 BYTE),
  AGEGESTRUM    VARCHAR2(2 BYTE),
  NSEQUM        VARCHAR2(4 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RUM_RUM
(
  NOCLAS             VARCHAR2(2 BYTE),
  CDGHM              VARCHAR2(6 BYTE),
  NOVERG             VARCHAR2(3 BYTE),
  CDERG              VARCHAR2(3 BYTE),
  NOFINESS           VARCHAR2(9 BYTE),
  NOVERR             VARCHAR2(3 BYTE),
  NORSS              VARCHAR2(10 BYTE),
  NAS                VARCHAR2(20 BYTE),
  NORUM              VARCHAR2(20 BYTE),
  DTNAIS             VARCHAR2(10 BYTE),
  SXPMSI             VARCHAR2(1 BYTE),
  CDURM              VARCHAR2(4 BYTE),
  KYTYPAUTLIT        VARCHAR2(20 BYTE),
  D8EEUE             VARCHAR2(10 BYTE),
  MDEEUE             VARCHAR2(1 BYTE),
  TYTRPR             VARCHAR2(1 BYTE),
  D8SOUE             VARCHAR2(10 BYTE),
  MDSOUE             VARCHAR2(1 BYTE),
  TYTRDS             VARCHAR2(1 BYTE),
  CDRESI             VARCHAR2(5 BYTE),
  PDNAIS             INTEGER,
  AGEGEST            INTEGER,
  DDR2               VARCHAR2(10 BYTE),
  NBSEAN             INTEGER,
  NBDAS              INTEGER,
  NBDAD              INTEGER,
  NBACTE             INTEGER,
  DP                 VARCHAR2(8 BYTE),
  DR                 VARCHAR2(8 BYTE),
  IGS                VARCHAR2(3 BYTE),
  CONFCDRSS          VARCHAR2(1 BYTE),
  RDT_TYPMACH        VARCHAR2(1 BYTE),
  RDT_TYPDOSIM       VARCHAR2(1 BYTE),
  NUMINNO            VARCHAR2(20 BYTE),
  CONVERSION_HC      VARCHAR2(1 BYTE),
  PC_RAAC            VARCHAR2(1 BYTE),
  SURVEILLANCE_PART  VARCHAR2(1 BYTE),
  ADMIN_RESERV_HOSP  VARCHAR2(1 BYTE),
  RESCRIT_TARIFAIRE  VARCHAR2(1 BYTE),
  CATEG_NB_INTERV    VARCHAR2(1 BYTE),
  ZONRES             VARCHAR2(20 BYTE),
  DUREESEJPART       INTEGER,
  ANSOR              VARCHAR2(4 BYTE),
  NBIVGANT           VARCHAR2(20 BYTE),
  ANIVGPREC          VARCHAR2(20 BYTE),
  NBNAIVIVANT        VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RSA_DIAGS
(
  CLE_RSA   VARCHAR2(10 BYTE),
  NSEQRUM   VARCHAR2(10 BYTE),
  POSITION  BINARY_DOUBLE,
  DIAG      VARCHAR2(6 BYTE),
  ANSOR     VARCHAR2(4 BYTE),
  NORSS     VARCHAR2(20 BYTE),
  NAS       VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RUM_DIAGS
(
  NAS       VARCHAR2(10 BYTE),
  NORUM     VARCHAR2(20 BYTE),
  POSITION  BINARY_DOUBLE,
  DIAG      VARCHAR2(8 BYTE),
  ANSOR     VARCHAR2(4 BYTE),
  NORSS     VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RSA_ANO
(
  NOFINESS          VARCHAR2(9 BYTE),
  NOFORMAT          VARCHAR2(3 BYTE),
  NOFORMHOSP        VARCHAR2(3 BYTE),
  MOISSORT          VARCHAR2(2 BYTE),
  ANNEESORT         VARCHAR2(4 BYTE),
  CRSECU            VARCHAR2(1 BYTE),
  CRDNAI            VARCHAR2(1 BYTE),
  CRSEXE            VARCHAR2(1 BYTE),
  CRNODA            VARCHAR2(1 BYTE),
  CRFUSHOSP         VARCHAR2(1 BYTE),
  CRFUSPMSI         VARCHAR2(1 BYTE),
  CRDTENT           VARCHAR2(1 BYTE),
  NOANON            VARCHAR2(17 BYTE),
  NOSEJ             INTEGER,
  CLE_RSA           VARCHAR2(10 BYTE),
  DTENT             VARCHAR2(10 BYTE),
  DTSORT            VARCHAR2(10 BYTE),
  CRCODEGR          VARCHAR2(1 BYTE),
  CREXTICM          VARCHAR2(1 BYTE),
  CRPRFOJO          VARCHAR2(1 BYTE),
  CRNATASS          VARCHAR2(1 BYTE),
  CRTYPECO          VARCHAR2(1 BYTE),
  CRFACTAM          VARCHAR2(1 BYTE),
  CRMOTNOFACT       VARCHAR2(1 BYTE),
  CRTOP18           VARCHAR2(1 BYTE),
  CRNBEVEN          VARCHAR2(1 BYTE),
  CRTICMOD          VARCHAR2(1 BYTE),
  CRFORJOU          VARCHAR2(1 BYTE),
  CRFACTOT          VARCHAR2(1 BYTE),
  CRMAJPAR          VARCHAR2(1 BYTE),
  CRMTBASE          VARCHAR2(1 BYTE),
  CRTXRM            VARCHAR2(1 BYTE),
  CRPBCMU           VARCHAR2(1 BYTE),
  CRNOADM           VARCHAR2(1 BYTE),
  CRHOSPNE          VARCHAR2(1 BYTE),
  CRHOSPPO          VARCHAR2(1 BYTE),
  CRDTHOSP          VARCHAR2(1 BYTE),
  CRRMBAMC          VARCHAR2(1 BYTE),
  CODEGR            VARCHAR2(2 BYTE),
  CDEXTICM          VARCHAR2(2 BYTE),
  CDPRFOJO          VARCHAR2(2 BYTE),
  NATASS            VARCHAR2(2 BYTE),
  TYPECONT          VARCHAR2(2 BYTE),
  FACTAM            VARCHAR2(1 BYTE),
  MOTNOFACT         VARCHAR2(1 BYTE),
  FAC18             VARCHAR2(1 BYTE),
  NBEVEN            INTEGER,
  MTFACTMO          BINARY_DOUBLE,
  MTFORJOU          BINARY_DOUBLE,
  MTFACTOT          BINARY_DOUBLE,
  MTMALPAR          BINARY_DOUBLE,
  MTBASERM          BINARY_DOUBLE,
  TAUXRM            BINARY_DOUBLE,
  PBCMU             VARCHAR2(1 BYTE),
  NOANOMER          VARCHAR2(32 BYTE),
  HOSPNE            VARCHAR2(1 BYTE),
  HOSPPO            VARCHAR2(1 BYTE),
  DTHOSP            VARCHAR2(10 BYTE),
  MTRMBAMC          BINARY_DOUBLE,
  COK               INTEGER,
  ANSOR             VARCHAR2(4 BYTE),
  NORSS             VARCHAR2(10 BYTE),
  NAS               VARCHAR2(20 BYTE),
  CRCDNAI           VARCHAR2(1 BYTE),
  CRCSEXE           VARCHAR2(1 BYTE),
  CRCDGESTION       VARCHAR2(1 BYTE),
  CRPARTASS         VARCHAR2(1 BYTE),
  CRNUMENT          VARCHAR2(1 BYTE),
  CRRGNAISS         VARCHAR2(1 BYTE),
  CRRGBEN           VARCHAR2(1 BYTE),
  CRCAISSGEST       VARCHAR2(1 BYTE),
  CRCENTRGEST       VARCHAR2(1 BYTE),
  CDGESTION         VARCHAR2(2 BYTE),
  PARTASS           VARCHAR2(20 BYTE),
  NUMENT            VARCHAR2(20 BYTE),
  RGNAISS           VARCHAR2(1 BYTE),
  RGBEN             VARCHAR2(3 BYTE),
  CAISSGEST         VARCHAR2(3 BYTE),
  CENTRGEST         VARCHAR2(4 BYTE),
  CRPECSU           VARCHAR2(1 BYTE),
  CRAT              VARCHAR2(1 BYTE),
  CRCOMP            VARCHAR2(1 BYTE),
  IDHOSPI1          VARCHAR2(20 BYTE),
  PECSU             VARCHAR2(20 BYTE),
  NUMAT             VARCHAR2(20 BYTE),
  NUMCOMP           VARCHAR2(20 BYTE),
  NOANONIND         VARCHAR2(17 BYTE),
  CRCFINESSPMSI     VARCHAR2(1 BYTE),
  CRCIMMATIND       VARCHAR2(1 BYTE),
  CRCNATJUSTDROITS  VARCHAR2(1 BYTE),
  CRCDATEPEC        VARCHAR2(1 BYTE),
  CRCDATEATTEST     VARCHAR2(1 BYTE),
  CRCDELIVR         VARCHAR2(1 BYTE),
  CRCREGPRESTASS    VARCHAR2(1 BYTE),
  CRCECLATFLUX      VARCHAR2(1 BYTE),
  CRCDTENT          VARCHAR2(1 BYTE),
  CRCDTSORT         VARCHAR2(1 BYTE),
  NOCHAINMER        VARCHAR2(32 BYTE),
  NATJUSTDROITS     VARCHAR2(1 BYTE),
  DATETABLPEC       VARCHAR2(8 BYTE),
  DATCARTVITALE     VARCHAR2(8 BYTE),
  DELIVR            VARCHAR2(3 BYTE),
  REGPRESTASS       VARCHAR2(3 BYTE),
  ECLATFLUX         VARCHAR2(1 BYTE),
  DTENT2            VARCHAR2(8 BYTE),
  DTSORT2           VARCHAR2(8 BYTE),
  EMPNUM            VARCHAR2(100 BYTE),
  CRMTTFACPAT       VARCHAR2(1 BYTE),
  CRREJETAMO        VARCHAR2(1 BYTE),
  CRDATFACTAMO      VARCHAR2(1 BYTE),
  CRDATFACTAMC      VARCHAR2(1 BYTE),
  CRDATFACTPAT      VARCHAR2(1 BYTE),
  CRDATPAIAMO       VARCHAR2(1 BYTE),
  CRDATPAIAMC       VARCHAR2(1 BYTE),
  CRDATPAIPAT       VARCHAR2(1 BYTE),
  CRSTATFTAMO       VARCHAR2(1 BYTE),
  CRSTATFTAMC       VARCHAR2(1 BYTE),
  CRSTATFTPAT       VARCHAR2(1 BYTE),
  CRPAYSPAT         VARCHAR2(1 BYTE),
  CRIDHOSPI1        VARCHAR2(1 BYTE),
  MTTFACPAT         BINARY_DOUBLE,
  REJETAMO          VARCHAR2(1 BYTE),
  DATFACTAMO        VARCHAR2(8 BYTE),
  DATFACTAMC        VARCHAR2(8 BYTE),
  DATFACTPAT        VARCHAR2(8 BYTE),
  DATPAIAMO         VARCHAR2(8 BYTE),
  DATPAIAMC         VARCHAR2(8 BYTE),
  DATPAIPAT         VARCHAR2(8 BYTE),
  STATFTAMO         VARCHAR2(1 BYTE),
  STATFTAMC         VARCHAR2(1 BYTE),
  STATFTPAT         VARCHAR2(1 BYTE),
  PAYSPAT           VARCHAR2(3 BYTE),
  CRIPP             VARCHAR2(1 BYTE),
  IPPA              VARCHAR2(100 BYTE),
  ILIASON           VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_CIM_HIERARCHIE_CODE
(
  CODE           VARCHAR2(6 BYTE),
  TR             VARCHAR2(1 BYTE),
  LIB_COURT      VARCHAR2(300 BYTE),
  LIB_LONG       VARCHAR2(1000 BYTE),
  CATEGORIE      VARCHAR2(3 BYTE),
  LIB_CATEGORIE  VARCHAR2(1000 BYTE),
  CHAPITRE       VARCHAR2(15 BYTE),
  BLOC           VARCHAR2(15 BYTE),
  LIB_CHAPITRE   VARCHAR2(1000 BYTE),
  LIB_BLOC       VARCHAR2(1000 BYTE),
  ANSEQTA        VARCHAR2(4 BYTE),
  TSSR           VARCHAR2(4 BYTE),
  TPSY           VARCHAR2(1 BYTE),
  TIME_I         INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_TARIFS_MCO_GHS
(
  GHS          VARCHAR2(255 BYTE),
  GHM          VARCHAR2(255 BYTE),
  LIBELLE_GHM  VARCHAR2(255 BYTE),
  BORNE_BASSE  INTEGER,
  BORNE_HAUTE  INTEGER,
  TARIF_BASE   BINARY_DOUBLE,
  FORFAIT_EXB  BINARY_DOUBLE,
  TARIF_EXB    BINARY_DOUBLE,
  TARIF_EXH    BINARY_DOUBLE,
  DATE_EFFET   VARCHAR2(255 BYTE),
  ANSEQTA      VARCHAR2(255 BYTE),
  TIME_I       VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RUM_ACTES
(
  NAS         VARCHAR2(20 BYTE),
  NORUM       VARCHAR2(20 BYTE),
  DTACTE      VARCHAR2(10 BYTE),
  CDCCAM      VARCHAR2(10 BYTE),
  DESCRI      VARCHAR2(3 BYTE),
  PHASE       VARCHAR2(1 BYTE),
  ACT         VARCHAR2(1 BYTE),
  EXTDOC      VARCHAR2(20 BYTE),
  MODIF       VARCHAR2(20 BYTE),
  REMBEXCEPT  VARCHAR2(20 BYTE),
  ASSONP      VARCHAR2(20 BYTE),
  NBEXEC      INTEGER,
  ANSOR       VARCHAR2(4 BYTE),
  NORSS       VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RSA_VALO
(
  CLE_RSA         VARCHAR2(255 BYTE),
  NBSEANCE        INTEGER,
  MOISSOR         VARCHAR2(255 BYTE),
  ANSEQTA         VARCHAR2(255 BYTE),
  REC_TOTALE      BINARY_DOUBLE,
  REC_BEE         BINARY_DOUBLE,
  REC_BASE        BINARY_DOUBLE,
  REC_EXB         BINARY_DOUBLE,
  REC_EXH         BINARY_DOUBLE,
  REC_REP         BINARY_DOUBLE,
  REC_REA         BINARY_DOUBLE,
  REC_STF         BINARY_DOUBLE,
  REC_SRC         BINARY_DOUBLE,
  REC_NN1         BINARY_DOUBLE,
  REC_NN2         BINARY_DOUBLE,
  REC_NN3         BINARY_DOUBLE,
  REC_DIALHOSP    BINARY_DOUBLE,
  REC_CAISHYP     BINARY_DOUBLE,
  REC_APH         BINARY_DOUBLE,
  REC_ANT         BINARY_DOUBLE,
  REC_RAP         BINARY_DOUBLE,
  REC_REHOSP_GHM  BINARY_DOUBLE,
  REC_RDT_TOT     BINARY_DOUBLE,
  REC_SDC         BINARY_DOUBLE,
  REC_PO_TOT      BINARY_DOUBLE,
  TYPE_FIN        BINARY_DOUBLE,
  TYPVIDHOSP      BINARY_DOUBLE,
  NORSS           VARCHAR2(255 BYTE),
  NAS             VARCHAR2(255 BYTE),
  ANSOR           VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RUM_VALO
(
  CLE_RSA             VARCHAR2(255 BYTE),
  NSEQRUM             VARCHAR2(255 BYTE),
  NBRUM               INTEGER,
  P1                  INTEGER,
  P2                  INTEGER,
  N                   INTEGER,
  PMCT_UM_DP          BINARY_DOUBLE,
  NB_UMA              INTEGER,
  NORSS               VARCHAR2(255 BYTE),
  CDURM               VARCHAR2(255 BYTE),
  TYPAUT1             VARCHAR2(255 BYTE),
  REC_REA_RUM         BINARY_DOUBLE,
  REC_STF_RUM         BINARY_DOUBLE,
  REC_SRC_RUM         BINARY_DOUBLE,
  REC_REP_RUM         BINARY_DOUBLE,
  REC_NN1_RUM         BINARY_DOUBLE,
  REC_NN2_RUM         BINARY_DOUBLE,
  REC_NN3_RUM         BINARY_DOUBLE,
  REC_BEE_RUM         BINARY_DOUBLE,
  REC_PO_TOT_RUM      BINARY_DOUBLE,
  REC_BASE_RUM        BINARY_DOUBLE,
  REC_EXB_RUM         BINARY_DOUBLE,
  REC_EXH_RUM         BINARY_DOUBLE,
  REC_ANT_RUM         BINARY_DOUBLE,
  REC_SDC_RUM         BINARY_DOUBLE,
  REC_CAISHYP_RUM     BINARY_DOUBLE,
  REC_REHOSP_GHM_RUM  BINARY_DOUBLE,
  REC_APH_RUM         BINARY_DOUBLE,
  REC_TOTALE_RUM      BINARY_DOUBLE,
  REC_DIALHOSP_RUM    BINARY_DOUBLE,
  REC_RDT_TOT_RUM     BINARY_DOUBLE,
  REC_RAP_RUM         BINARY_DOUBLE,
  REC_ANNEXES_RUM     BINARY_DOUBLE,
  SUPREA              BINARY_DOUBLE,
  SUPSTF              BINARY_DOUBLE,
  SUPSRC              BINARY_DOUBLE,
  SUPNN1              BINARY_DOUBLE,
  SUPNN2              BINARY_DOUBLE,
  SUPNN3              BINARY_DOUBLE,
  SUPREP              BINARY_DOUBLE,
  SUPREA_PROP         BINARY_DOUBLE,
  SUPSTF_PROP         BINARY_DOUBLE,
  SUPSRC_PROP         BINARY_DOUBLE,
  SUPREP_PROP         BINARY_DOUBLE,
  SUPNN1_PROP         BINARY_DOUBLE,
  SUPNN2_PROP         BINARY_DOUBLE,
  SUPNN3_PROP         BINARY_DOUBLE,
  FLAG_REA            BINARY_DOUBLE,
  FLAG_STF            BINARY_DOUBLE,
  FLAG_SRC            BINARY_DOUBLE,
  FLAG_NN1            BINARY_DOUBLE,
  FLAG_NN2            BINARY_DOUBLE,
  FLAG_NN3            BINARY_DOUBLE,
  FLAG_REP            BINARY_DOUBLE,
  NAS                 VARCHAR2(255 BYTE),
  ANSOR               VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_TARIFS_MCO_GHS_9999
(
  GHS          VARCHAR2(4 BYTE),
  GHM          VARCHAR2(6 BYTE),
  LIBELLE_GHM  VARCHAR2(200 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_CCAM_ACTES
(
  CODE                VARCHAR2(7 BYTE),
  LIBELLE_COURT       VARCHAR2(500 BYTE),
  TYPE_ACTE           VARCHAR2(1 BYTE),
  COMPATIBILITE_SEXE  VARCHAR2(1 BYTE),
  DATE_DEBUT          VARCHAR2(10 BYTE),
  LIBELLE_LONG        VARCHAR2(1000 BYTE),
  DATE_FIN            VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_GHM_GHM_REGROUPEMENT
(
  GHM             VARCHAR2(255 BYTE),
  LIBELLE_GHM     VARCHAR2(255 BYTE),
  DA              VARCHAR2(255 BYTE),
  LIBELLE_DA      VARCHAR2(255 BYTE),
  GP_CAS          VARCHAR2(255 BYTE),
  LIBELLE_GP_CAS  VARCHAR2(255 BYTE),
  GA              VARCHAR2(255 BYTE),
  LIBELLE_GA      VARCHAR2(255 BYTE),
  DA_GP           VARCHAR2(255 BYTE),
  DA_GP_GA        VARCHAR2(255 BYTE),
  ANSEQTA         VARCHAR2(255 BYTE),
  TIME_I          VARCHAR2(255 BYTE),
  ASO             VARCHAR2(255 BYTE),
  RACINE          VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_CCAM_HIERARCHIE_ACTES
(
  STRATE            VARCHAR2(11 BYTE),
  CODE              VARCHAR2(7 BYTE),
  PARENT            VARCHAR2(7 BYTE),
  LIBELLE           VARCHAR2(500 BYTE),
  NIVEAU_1          VARCHAR2(2 BYTE),
  NIVEAU_2          VARCHAR2(2 BYTE),
  NIVEAU_3          VARCHAR2(2 BYTE),
  NIVEAU_4          VARCHAR2(2 BYTE),
  TYPE              VARCHAR2(1 BYTE),
  LIB_NIVEAU        VARCHAR2(40 BYTE),
  NIVEAU            INTEGER,
  LIBELLE_NIVEAU_1  VARCHAR2(500 BYTE),
  LIBELLE_NIVEAU_2  VARCHAR2(500 BYTE),
  LIBELLE_NIVEAU_3  VARCHAR2(500 BYTE),
  LIBELLE_NIVEAU_4  VARCHAR2(500 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_GHM_RGHM_REGROUPEMENT
(
  RACINE          VARCHAR2(255 BYTE),
  LIBELLE_RACINE  VARCHAR2(255 BYTE),
  DA              VARCHAR2(255 BYTE),
  LIBELLE_DA      VARCHAR2(255 BYTE),
  GP_CAS          VARCHAR2(255 BYTE),
  LIBELLE_GP_CAS  VARCHAR2(255 BYTE),
  GA              VARCHAR2(255 BYTE),
  LIBELLE_GA      VARCHAR2(255 BYTE),
  DA_GP           VARCHAR2(255 BYTE),
  DA_GP_GA        VARCHAR2(255 BYTE),
  ANSEQTA         VARCHAR2(255 BYTE),
  TIME_I          VARCHAR2(255 BYTE),
  ASO             VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_CCAM_ACTES_AVEC_DESCRI
(
  CODE                   VARCHAR2(255 BYTE),
  TYPE_ACTE              VARCHAR2(255 BYTE),
  COMPATIBILITE_SEXE     VARCHAR2(255 BYTE),
  LIBELLE_COURT          VARCHAR2(300 BYTE),
  DATE_DEBUT             VARCHAR2(255 BYTE),
  LIBELLE_LONG           VARCHAR2(500 BYTE),
  DATE_FIN               VARCHAR2(255 BYTE),
  FLAG_DESCRI            INTEGER,
  EXTENSION_DESCRIPTIVE  VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE TEMP_INTERVS
(
  I_ADMISSION_NR  VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE OVA_DIAGINFO
(
  DIAG          VARCHAR2(255 BYTE),
  RARE          VARCHAR2(255 BYTE),
  DPCHIR        VARCHAR2(255 BYTE),
  DAGUE         VARCHAR2(255 BYTE),
  SEXD          VARCHAR2(255 BYTE),
  CL1V          VARCHAR2(255 BYTE),
  CL2V          VARCHAR2(255 BYTE),
  CL3V          VARCHAR2(255 BYTE),
  CL4V          VARCHAR2(255 BYTE),
  CL5V          VARCHAR2(255 BYTE),
  CL6V          VARCHAR2(255 BYTE),
  ZINHAB        VARCHAR2(255 BYTE),
  IMPRECIS      VARCHAR2(255 BYTE),
  ZAFFCHR       VARCHAR2(255 BYTE),
  CODEXT        VARCHAR2(255 BYTE),
  CODSEQ        VARCHAR2(255 BYTE),
  TIMPRECIS     VARCHAR2(255 BYTE),
  TINTOX        VARCHAR2(255 BYTE),
  CMA           VARCHAR2(255 BYTE),
  DPACTE        VARCHAR2(255 BYTE),
  DGCPT669      VARCHAR2(255 BYTE),
  BRULURE       VARCHAR2(255 BYTE),
  ESTH          VARCHAR2(255 BYTE),
  AFFAIG        VARCHAR2(255 BYTE),
  COMPIMPRECIS  VARCHAR2(255 BYTE),
  AUTRES        VARCHAR2(255 BYTE),
  BRULUREBIS    VARCHAR2(255 BYTE),
  SEANCE        VARCHAR2(255 BYTE),
  ANNEE         VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE OVA_CCAMINFO
(
  CDCCAM        VARCHAR2(255 BYTE),
  PHASE         VARCHAR2(255 BYTE),
  ACTE          VARCHAR2(255 BYTE),
  FFM           VARCHAR2(255 BYTE),
  SE            VARCHAR2(255 BYTE),
  FSD           VARCHAR2(255 BYTE),
  AUTRE         VARCHAR2(255 BYTE),
  UNICHIR       VARCHAR2(255 BYTE),
  GESTCOMP      VARCHAR2(255 BYTE),
  REQZ          VARCHAR2(255 BYTE),
  DIALYSE       VARCHAR2(255 BYTE),
  ESTHE         VARCHAR2(255 BYTE),
  CONFORT       VARCHAR2(255 BYTE),
  BRULE         VARCHAR2(255 BYTE),
  NEUROCHIR     VARCHAR2(255 BYTE),
  ACCOUCHEMENT  VARCHAR2(255 BYTE),
  SEANCE        VARCHAR2(255 BYTE),
  ATEXT         VARCHAR2(255 BYTE),
  NBEXTAT       BINARY_DOUBLE,
  ZJATYPIQUE    VARCHAR2(255 BYTE),
  ANNEE         VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_CCAM_ICR
(
  CODE      VARCHAR2(255 BYTE),
  ACTIVITE  VARCHAR2(255 BYTE),
  PHASE     VARCHAR2(255 BYTE),
  ICR       INTEGER,
  CLASSANT  VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE TEMP_RSS_GPR
(
  AC_ID_RSS  BINARY_DOUBLE,
  NORSS      VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE NM_CCAM
(
  CODE           VARCHAR2(7 BYTE),
  ACTIV          VARCHAR2(1 BYTE),
  PHASE          VARCHAR2(1 BYTE),
  LIBELLE        VARCHAR2(70 BYTE),
  LIBELLE_LONG   VARCHAR2(600 BYTE),
  EXCLUSIF_ATIH  CHAR(1 BYTE),
  DATE_DEBUT     DATE,
  DATE_FIN       DATE,
  MENU           NUMBER(5),
  HIERARCHIE     VARCHAR2(60 BYTE),
  CLASSANT       VARCHAR2(1 BYTE),
  PU_BASE        FLOAT(126),
  ICR            NUMBER(5),
  RGP            VARCHAR2(3 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE NM_CCAM_BIS
(
  CODE                VARCHAR2(7 BYTE),
  ACTIV               VARCHAR2(1 BYTE),
  PHASE               VARCHAR2(1 BYTE),
  LIBELLE             VARCHAR2(70 BYTE),
  LIBELLE_LONG        VARCHAR2(600 BYTE),
  EXCLUSIF_ATIH       CHAR(1 BYTE),
  DATE_DEBUT          DATE,
  DATE_FIN            DATE,
  MENU                NUMBER(5),
  HIERARCHIE          VARCHAR2(60 BYTE),
  CLASSANT            VARCHAR2(1 BYTE),
  PU_BASE             FLOAT(126),
  ICR                 NUMBER(5),
  RGP                 VARCHAR2(3 BYTE),
  EXTENSION_ATIH      VARCHAR2(2 BYTE),
  LIBELLE_DESCRIPTIF  VARCHAR2(600 BYTE),
  DATE_DEBUT_DESCRI   DATE,
  DATE_FIN_DESCRI     DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE STAT_ASSOC_UM_UF
(
  CDURM         VARCHAR2(10 BYTE),
  UF_PMSI_ALT   VARCHAR2(10 BYTE),
  NOMBRE_RUM    NUMBER,
  NOMBRE_RSS    NUMBER,
  DATE_STAT     DATE,
  MAX_DATE_RUM  DATE,
  RANG_UF       NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE OVA_GHMINFO
(
  GHM        VARCHAR2(255 BYTE),
  CMA        VARCHAR2(255 BYTE),
  CMAS       VARCHAR2(255 BYTE),
  TGHM       VARCHAR2(255 BYTE),
  CMD        VARCHAR2(255 BYTE),
  TARIF      BINARY_DOUBLE,
  DMS        BINARY_DOUBLE,
  PCTDC      BINARY_DOUBLE,
  MAGE       BINARY_DOUBLE,
  BINF       BINARY_DOUBLE,
  BSUP       BINARY_DOUBLE,
  DSATYP     BINARY_DOUBLE,
  TEST9      BINARY_DOUBLE,
  BPCDC      BINARY_DOUBLE,
  PCTCOURT   BINARY_DOUBLE,
  PVALO      VARCHAR2(255 BYTE),
  PCTPVALO   BINARY_DOUBLE,
  PCTCMA4    BINARY_DOUBLE,
  PCTAUTRES  BINARY_DOUBLE,
  ANNEE      VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_CORA_IPP
(
  NORSS              VARCHAR2(255 BYTE),
  ANSOR              VARCHAR2(4 BYTE),
  ID_SEJOUR          NUMBER(8),
  ID_PATIENT         NUMBER(8),
  DATE_DEBUT         DATE,
  DATE_FIN           DATE,
  IPP_PATIENT        VARCHAR2(20 BYTE),
  NOM_USUEL_PATIENT  VARCHAR2(50 BYTE),
  PRENOM_PATIENT     VARCHAR2(50 BYTE),
  DATE_NAIS          DATE,
  DATE_DECES         DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_CORA_UF_PMSI
(
  NORSS              VARCHAR2(255 BYTE),
  ANSOR              VARCHAR2(4 BYTE),
  ID_RSS             NUMBER(8),
  NORUM              VARCHAR2(42 BYTE),
  DUREE_RUM          NUMBER(5),
  DATE_DEBUT_RUM     DATE,
  DATE_FIN_RUM       DATE,
  ID_RUM             NUMBER(10),
  CHRONO             NUMBER(3),
  ID_MVT             NUMBER(8),
  UF_PMSI            VARCHAR2(10 BYTE),
  ID_UM_HEBERG       NUMBER(5),
  ID_UNITE_HEBERG    NUMBER(5),
  ID_UM_RESP_MED     NUMBER(5),
  ID_UNITE_RESP_MED  NUMBER(5),
  CDURM              VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_BR_UMAS
(
  UF       VARCHAR2(255 BYTE),
  UM       VARCHAR2(255 BYTE),
  SERVICE  VARCHAR2(255 BYTE),
  POLE     VARCHAR2(255 BYTE),
  IUM      VARCHAR2(255 BYTE),
  IUF      VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_ATU_ATIH_INDICATIONS
(
  UCD7               VARCHAR2(7 BYTE),
  UCD13              VARCHAR2(13 BYTE),
  LIBELLEUCD         VARCHAR2(800 BYTE),
  CODEINDICATION     VARCHAR2(7 BYTE),
  LIBELLEINDICATION  VARCHAR2(3000 BYTE),
  SOURCE             VARCHAR2(800 BYTE),
  PERIODE            VARCHAR2(10 BYTE),
  TIME_I             VARCHAR2(10 BYTE),
  DATEDEDEBUT        VARCHAR2(10 BYTE),
  DATEDEFIN          VARCHAR2(10 BYTE),
  DTDEB_INDIC        VARCHAR2(10 BYTE),
  DTFIN_INDIC        VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE DOC_VALO_LIB_TYPE_FIN
(
  TYPE_FIN  VARCHAR2(255 BYTE),
  LIB_TYPE  VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RSA_MED
(
  NOFINESS     VARCHAR2(255 BYTE),
  TYPEPREST    VARCHAR2(255 BYTE),
  ANNEE        VARCHAR2(255 BYTE),
  MOIS         VARCHAR2(255 BYTE),
  CLE_RSA      VARCHAR2(255 BYTE),
  NBSEJ        INTEGER,
  CDUCD        VARCHAR2(255 BYTE),
  NBADM        BINARY_DOUBLE,
  PRIX         BINARY_DOUBLE,
  MOISADMIN    VARCHAR2(255 BYTE),
  ANADMIN      VARCHAR2(255 BYTE),
  DELAI        INTEGER,
  INDVALINIT   VARCHAR2(255 BYTE),
  ANSOR        VARCHAR2(255 BYTE),
  NORSS        VARCHAR2(255 BYTE),
  NAS          VARCHAR2(255 BYTE),
  TOPUCD13     VARCHAR2(255 BYTE),
  NOFINESSGEO  VARCHAR2(255 BYTE),
  INDICATION   VARCHAR2(255 BYTE),
  FILLER       VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE DOC_VALO_LIB_VALO
(
  ORDRE_EPMSI  INTEGER,
  VAR          VARCHAR2(255 BYTE),
  LIB_VALO     VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE DOC_VALO_LIB_TYPE_VIDHOSP
(
  TYPVIDHOSP      INTEGER,
  LIB_TYPVIDHOSP  VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE DOC_DICO_PMSI
(
  CHAMP     VARCHAR2(255 BYTE),
  "TABLE"   VARCHAR2(255 BYTE),
  NOM       VARCHAR2(255 BYTE),
  LIBELLE   VARCHAR2(255 BYTE),
  LONGUEUR  VARCHAR2(255 BYTE),
  POSITION  VARCHAR2(255 BYTE),
  TYPE      VARCHAR2(255 BYTE),
  AN        VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REF_MED_ATIH_INDICATIONS
(
  UCD7           VARCHAR2(7 BYTE),
  SPECIALITE     VARCHAR2(100 BYTE),
  CODE_LES       VARCHAR2(7 BYTE),
  INSCRIPTION    VARCHAR2(10 BYTE),
  UCD13          VARCHAR2(13 BYTE),
  DCI            VARCHAR2(100 BYTE),
  LABO           VARCHAR2(100 BYTE),
  LIBINDICATION  VARCHAR2(3000 BYTE),
  DATEDEBUT      VARCHAR2(10 BYTE),
  CLASSIND1      VARCHAR2(800 BYTE),
  CLASSIND2      VARCHAR2(800 BYTE),
  TIME_I         VARCHAR2(10 BYTE),
  PERIODE        VARCHAR2(10 BYTE),
  GENER          VARCHAR2(100 BYTE),
  DATEFIN        VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RUM_MED
(
  NOFINESS    VARCHAR2(255 BYTE),
  TYPEPREST   VARCHAR2(255 BYTE),
  NAS         VARCHAR2(255 BYTE),
  DTDISP      VARCHAR2(255 BYTE),
  CDUCD       VARCHAR2(255 BYTE),
  "Fil1"      VARCHAR2(255 BYTE),
  NBADM       BINARY_DOUBLE,
  PRIX        BINARY_DOUBLE,
  INDVALINIT  VARCHAR2(255 BYTE),
  ANSOR       VARCHAR2(255 BYTE),
  INDICATION  VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RUM_DMI
(
  NOFINESS   VARCHAR2(255 BYTE),
  TYPEPREST  VARCHAR2(255 BYTE),
  NAS        VARCHAR2(255 BYTE),
  DTPOSE     VARCHAR2(255 BYTE),
  CDLPP      VARCHAR2(255 BYTE),
  NBPOSE     BINARY_DOUBLE,
  PRIX       BINARY_DOUBLE,
  ANSOR      VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MCO_RSA_DMI
(
  NOFINESS   VARCHAR2(255 BYTE),
  TYPEPREST  VARCHAR2(255 BYTE),
  NAS        VARCHAR2(255 BYTE),
  DTPOSE     VARCHAR2(255 BYTE),
  CDLPP      VARCHAR2(255 BYTE),
  NBPOSE     BINARY_DOUBLE,
  PRIX       BINARY_DOUBLE,
  ANSOR      VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE INDEX IDX__MCO_BR_UMAS_IUF ON MCO_BR_UMAS
(IUF)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_BR_UMAS_IUM ON MCO_BR_UMAS
(IUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_DIAGS__NAS ON MCO_RSA_DIAGS
(NAS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ACTES__NAS ON MCO_RSA_ACTES
(NAS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ACTES__CDCCAM ON MCO_RSA_ACTES
(CDCCAM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ACTES__NORSSSQRUM ON MCO_RSA_ACTES
(NORSS, NSEQRUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_UF_PMSI_NORSSRUM ON MCO_CORA_UF_PMSI
(NORSS, NORUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ACTES__ANSOR ON MCO_RSA_ACTES
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ACTES__NORSS ON MCO_RSA_ACTES
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ANO__DTENT ON MCO_RSA_ANO
(DTENT)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ANO__NAS ON MCO_RSA_ANO
(NAS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ANO__NORSS ON MCO_RSA_ANO
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_IPP_IPP_PATIENT ON MCO_CORA_IPP
(IPP_PATIENT)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_IPP_NORSS ON MCO_CORA_IPP
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_IPP_ANSOR ON MCO_CORA_IPP
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ANO__DTSORT ON MCO_RSA_ANO
(DTSORT)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_ANO__ANSOR ON MCO_RSA_ANO
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_UF_PMSI_UF_PMSI ON MCO_CORA_UF_PMSI
(UF_PMSI)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_UF_PMSI_NORUM ON MCO_CORA_UF_PMSI
(NORUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_UF_PMSI_CDURM ON MCO_CORA_UF_PMSI
(CDURM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_ACTES__ANSOR ON MCO_RUM_ACTES
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_DIAGS__ANSOR ON MCO_RUM_DIAGS
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_ACTES__NAS ON MCO_RUM_ACTES
(NAS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_ACTES__NORSSRUM ON MCO_RUM_ACTES
(NORSS, NORUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_ACTES__NORUM ON MCO_RUM_ACTES
(NORUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_ACTES__NORSS ON MCO_RUM_ACTES
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_ACTES__CDCCAM ON MCO_RUM_ACTES
(CDCCAM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_DIAGS__DIAGPOS ON MCO_RUM_DIAGS
(DIAG, POSITION)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_DIAGS__NORSSRUM ON MCO_RUM_DIAGS
(NORSS, NORUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_RUM__CDURM ON MCO_RUM_RUM
(CDURM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_RUM__ANSOR ON MCO_RUM_RUM
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_DIAGS__POS ON MCO_RUM_DIAGS
(POSITION)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_DIAGS__NORSS ON MCO_RUM_DIAGS
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_DIAGS__NAS ON MCO_RUM_DIAGS
(NAS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_RUM__NAS ON MCO_RUM_RUM
(NAS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_RUM__NORSS_NORUM ON MCO_RUM_RUM
(NORSS, NORUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_RUM__NORUM ON MCO_RUM_RUM
(NORUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_RUM__NORSS ON MCO_RUM_RUM
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_CORA_UF_PMSI_NORSS ON MCO_CORA_UF_PMSI
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RUM_DIAGS__DIAG ON MCO_RUM_DIAGS
(DIAG)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_RSA__TYPE ON MCO_RSA_RSA
(RSATYPE)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_RSA__AGEAN ON MCO_RSA_RSA
(AGEAN)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_RSA__NAS ON MCO_RSA_RSA
(NAS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_RSA__GHM ON MCO_RSA_RSA
(GHM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_RSA__NORSS ON MCO_RSA_RSA
(NORSS)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_RSA__ANSOR ON MCO_RSA_RSA
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_DIAGS__ANSOR ON MCO_RSA_DIAGS
(ANSOR)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_DIAGS__POS ON MCO_RSA_DIAGS
(POSITION)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_DIAGS__DIAG ON MCO_RSA_DIAGS
(DIAG)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_DIAGS__NORSSRUM ON MCO_RSA_DIAGS
(NORSS, NSEQRUM)
LOGGING
NOPARALLEL;


CREATE INDEX IDX__MCO_RSA_DIAGS__NORSS ON MCO_RSA_DIAGS
(NORSS)
LOGGING
NOPARALLEL;


CREATE OR REPLACE VIEW EPMSI_1_V2_VMED_F
AS 
select ANMOISADMIN, IEP, NORSS, DTADM, TYPE_EPMSI, CDUCD, CDUCD7, TYPEPREST, INDICATION, INSCRIPTION, NBADM, PRIX LIBINDICATION from PMSI.EPMSI_1_V2_VMED_A
where INSCRIPTION = 'non' or (INSCRIPTION is NULL and INDICATION not like 'I99999%')
order by ANMOISADMIN;


CREATE OR REPLACE VIEW EPMSI_1_V2_VMED_A
AS 
select m.ANADMIN||m.MOISADMIN as ANMOISADMIN, r.TYPE_FIN, r.TYPE_FIN ||' / ' ||  l.LIB_TYPE as TYPE_EPMSI, r.NAS as IEP, r.NORSS, m.CDUCD, 
        substr(CDUCD, 6,7) as CDUCD7, m.TYPEPREST, m.INDICATION,  m.PRIX, m.NBADM, m.DELAI, 
        to_date(a.DTENT, 'yyyy-mm-dd') as DTENT, to_date(a.DTSORT, 'yyyy-mm-dd') as DTSORT, 
        to_date(a.DTENT, 'yyyy-mm-dd') + DELAI as DTADM,  i.SPECIALITE, i.INSCRIPTION, i.LABO, i.CLASSIND1,i.DATEDEBUT as DTDEB_INDIC, i.LIBINDICATION from
        PMSI.MCO_RSA_VALO r 
        inner join PMSI.MCO_RSA_MED m 
        on r.NORSS = m.NORSS and r.ANSOR = '2020'  and m.TYPEPREST = '06'
        inner join PMSI.MCO_RSA_ANO a
        on r.NORSS = a.NORSS
        left join PMSI.DOC_VALO_LIB_TYPE_FIN l on r.TYPE_FIN = l.TYPE_FIN
        left join 
        (select * from         
(select max(ANADMIN||MOISADMIN) as PERIODE from PMSI.MCO_RSA_MED) per 
        inner join PMSI.REF_MED_ATIH_INDICATIONS i on i.PERIODE = per.PERIODE) i on m.CDUCD = i.UCD13 and m.INDICATION = i.CODE_LES;


CREATE OR REPLACE VIEW EPMSI_1_V2_MATU_B
AS 
select ANMOISADMIN, TYPE_FIN, TYPE_EPMSI, IEP, NORSS, CDUCD, CDUCD7, TYPEPREST, INDICATION, DTADM, DTDEB_INDIC, DTFIN_INDIC,
PRIX, NBADM, DELAI from PMSI.EPMSI_1_V2_MATU_A where ANMOISADMIN > '201912' and (INSCRIPTION_ATU_POST_ATU is NULL  /*or DTADM not between DTDEB_INDIC and DTFIN_INDIC*/)
order by ANMOISADMIN;


CREATE OR REPLACE VIEW EPMSI_1_V2_MATU_A
AS 
select m.ANADMIN||m.MOISADMIN as ANMOISADMIN, r.TYPE_FIN, to_char(r.TYPE_FIN, '9') ||' / ' ||  l.LIB_TYPE as TYPE_EPMSI, r.NAS as IEP, r.NORSS, m.CDUCD, 
        substr(CDUCD, 6,7) as CDUCD7, m.TYPEPREST, m.INDICATION,  m.PRIX, m.NBADM, m.DELAI, 
        to_date(a.DTENT, 'yyyy-mm-dd') as DTENT, to_date(a.DTSORT, 'yyyy-mm-dd') as DTSORT, 
        to_date(a.DTENT, 'yyyy-mm-dd') + DELAI as DTADM, to_date(i.DTDEB_INDIC, 'yyyy-mm-dd') as DTDEB_INDIC, to_date(i.DTFIN_INDIC, 'yyyy-mm-dd') as DTFIN_INDIC, i.INSCRIPTION_ATU_POST_ATU from
        PMSI.MCO_RSA_VALO r 
        inner join PMSI.MCO_RSA_MED m 
        on r.NORSS = m.NORSS and r.ANSOR = '2020'  and m.TYPEPREST = '09'
        inner join PMSI.MCO_RSA_ANO a
        on r.NORSS = a.NORSS
        left join PMSI.DOC_VALO_LIB_TYPE_FIN l on r.TYPE_FIN = l.TYPE_FIN
        left join (select distinct UCD13, DTFIN_INDIC, PERIODE, DTDEB_INDIC, CODEINDICATION, 'oui' as INSCRIPTION_ATU_POST_ATU from PMSI.REF_ATU_ATIH_INDICATIONS) i on 
        m.CDUCD = i.UCD13 and m.INDICATION = i.CODEINDICATION and m.ANADMIN||m.MOISADMIN = i.PERIODE and m.ANADMIN > '2019';


CREATE OR REPLACE VIEW EPMSI_1_Q_7_CHCR
AS 
select distinct a.NAS as IEP, a.NORSS, a.DTENT, a.DTSORT, a.CRSECU, a.CRDNAI, a.CRSEXE, a.CRNODA, A.CRFUSHOSP, A.CRFUSPMSI, A.CRCDTENT, a.CRCDNAI, a.CRCSEXE, 
 a.CRSECU||a.CRDNAI||a.CRSEXE||a.CRNODA||A.CRFUSHOSP||A.CRFUSPMSI||A.CRCDTENT||a.CRCDNAI||a.CRCSEXE as concatenation_cr, A.CRIPP
from PMSI.MCO_RSA_ANO a
where a.ANSOR = '2020' and a.CRSECU||a.CRDNAI||a.CRSEXE||a.CRNODA||A.CRFUSHOSP||A.CRFUSPMSI||A.CRCDTENT||a.CRCDNAI||a.CRCSEXE <> '000000000' or CRIPP <> '0';


CREATE OR REPLACE VIEW EPMSI_1_Q_6_SSNA
AS 
select a.NAS as IEP, a.NORSS, a.DUREE, b.CDCCAM from
PMSI.MCO_RSA_RSA a 
inner join PMSI.MCO_RSA_ACTES b on a.NORSS = b.NORSS and a.ANSOR = '2020' and b.ACT = '1' and a.DUREE = 0
inner join PMSI.OVA_CCAMINFO c on b.CDCCAM = c.CDCCAM and c.GESTCOMP = '1';


CREATE OR REPLACE VIEW EPMSI_1_Q_6_SDSA
AS 
select a.NAS as IEP, a.NORSS, a.DP, a.GHM, u.TYPAUT1, sum(decode(c.DIALYSE, '1', 1, 0)) as top_dialyse
from PMSI.MCO_RSA_RSA a
inner join PMSI.MCO_RSA_UM u on a.NORSS = u.NORSS and substr(u.TYPAUT1,1,3) <> '23' and a.ANSOR = '2020' and DP in ('Z491', 'Z492') and a.RSACMD = '28'
inner join PMSI.MCO_RSA_ACTES b on a.NORSS = b.NORSS 
left join (select * from PMSI.OVA_CCAMINFO) c on b.CDCCAM = c.CDCCAM 
group by a.NAS, a.NORSS, a.DP, a.GHM, u.TYPAUT1
having sum(decode(c.DIALYSE, '1', 1, 0)) = 0;


CREATE OR REPLACE VIEW EPMSI_1_Q_6_GMDPC
AS 
select a.NAS as IEP, a.NORSS, a.DP, a.GHM from
(select * from PMSI.MCO_RSA_RSA a where 
a.ECHPMSI in ('8', 'N') and a.SCHPMSI = '8' ) a
inner join PMSI.OVA_DIAGINFO b on a.DP = b.DIAG and b.DPCHIR = 1 and a.ANSOR = '2020'
inner join PMSI.OVA_GHMINFO d on a.GHM = d.GHM and d.TGHM = 'M'
left join (select NORSS, DIAG from PMSI.MCO_RSA_DIAGS where DIAG like 'Z53%') c on a.NORSS = c.NORSS where c.DIAG is NULL;


CREATE OR REPLACE VIEW EPMSI_1_Q_6_DPSA
AS 
select a.NAS as IEP, a.NORSS, a.DP
from PMSI.MCO_RSA_RSA a 
inner join PMSI.OVA_DIAGINFO b on a.DP = b.DIAG and a.ANSOR = '2020' and b.DPACTE = '1' and a.NA = 0
left join (select NORSS, DIAG from PMSI.MCO_RSA_DIAGS where DIAG like 'Z53%') c on a.NORSS = c.NORSS where c.DIAG is NULL;


CREATE OR REPLACE VIEW EPMSI_1_Q_6_CCIA
AS 
select distinct a.NAS as IEP, a.GHM, a.NORSS, c.DIAG from
PMSI.MCO_RSA_RSA a 
inner join (select * from PMSI.MCO_RSA_DIAGS where POSITION = 5) c on a.NORSS = c.NORSS and a.ANSOR = '2020'
inner join PMSI.OVA_DIAGINFO d on c.DIAG = d.DIAG and d.COMPIMPRECIS = '1'
left join (select * from PMSI.MCO_RSA_DIAGS where substr(DIAG,1,3) between 'T80' and 'T88') e on a.NORSS = e.NORSS where e.DIAG is NULL;


CREATE OR REPLACE VIEW EPMSI_1_Q_6_ACD
AS 
select a.NAS as IEP, a.NORSS, b.CDCCAM, b.ACT, b.DELAI, b.NBEXEC  as nb
from PMSI.MCO_RSA_RSA a 
inner join PMSI.MCO_RSA_ACTES b on a.ANSOR = '2020' and a.NORSS = b.NORSS and b.ACT = '1'
inner join PMSI.OVA_CCAMINFO c on b.CDCCAM = c.CDCCAM and c.UNICHIR = '1'
where b.NBEXEC > 1;


CREATE OR REPLACE VIEW EPMSI_1_Q_6_ABSD
AS 
select a.NAS as IEP, a.NORSS, a.DP, sum(decode(c.BRULURE, '1', 1, 0)) as top_brulure_diag, sum(decode(e.BRULE, '1', 1, 0)) as top_brulure_acte
from PMSI.MCO_RSA_RSA a
inner join PMSI.MCO_RSA_DIAGS b on a.NORSS = b.NORSS and a.ANSOR = '2020' and a.GHM <> '09Z02Z'
inner join PMSI.OVA_DIAGINFO c on b.DIAG = c.DIAG
inner join PMSI.MCO_RSA_ACTES d on a.NORSS = d.NORSS 
inner join PMSI.OVA_CCAMINFO e on d.CDCCAM = e.CDCCAM
group by a.NAS, a.NORSS, a.DP
having sum(decode(c.BRULURE, '1', 1, 0)) = 0 and sum(decode(e.BRULE, '1', 1, 0)) > 0;


CREATE OR REPLACE VIEW EPMSI_1_Q_6_AASSN
AS 
select a.NAS as IEP, a.NORSS, count(distinct b.CdCCAM) as NB_ACTES, listagg(b.CDCCAM, ', ') within group (order by a.NORSS) as CODES_ACTES  from
(select *  from PMSI.MCO_RSA_RSA where RSACMD <> '90' and RSACMD <> '28' and (not (SCHPMSI in ('6', '7') and DEST = '1')) and SCHPMSI <> '9' and (TYPESEJ <> 'B' or TYPESEJ is NULL) and DUREE = 0 and ANSOR = '2020') a
inner join (select distinct NORSS, CDCCAM from PMSI.MCO_RSA_ACTES) b on
a.NORSS = b.NORSS  
inner join PMSI.OVA_CCAMINFO c on b.CDCCAM = c.CDCCAM and c.ZJATYPIQUE = '1' and c.SEANCE = '0'
group by a.NAS, a.NORSS;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_KIDPDR
AS 
select distinct a.NAS as IEP, a.NORSS, a.DP, a.DR, a.GHM
from PMSI.MCO_RSA_RSA a where a.ANSOR = '2020'  and (
(a.DP in ('Z511', 'Z5101') and (not (
(DR is not NULL AND (substr(a.DR,1,3) between 'C00' and 'C97') OR (substr(a.DR,1,3) between 'D00' and 'D09') OR (substr(a.DR,1,3) between 'D37' and 'D48'))) OR 
DR is NULL)) OR
(a.DP like 'Z08%' and (not (
(DR is not NULL AND (substr(a.DR,1,3) between 'C00' and 'C97') OR (substr(a.DR,1,3) between 'D00' and 'D09') OR (a.DR like 'Z85%'))) OR 
DR is NULL))
);


CREATE OR REPLACE VIEW EPMSI_1_Q_5_ISD
AS 
select distinct a.NAS as IEP,  a.NORSS, b.DIAG, case b.POSITION when 5 THEN 'Diagnostic associé' when 3 then 'Diagnostic principal' when 1 then 'Diagnostic principal' 
when 4 then 'Diagnostic relié' when 2 then 'Diagnostic relié' end as type_diagnostic from
(select *  from PMSI.MCO_RSA_RSA where  ANSOR = '2020') a
inner join PMSI.MCO_RSA_DIAGS b on a.NORSS = b.NORSS
inner join PMSI.OVA_DIAGINFO c on b.DIAG = c.DIAG and c.SEXD <> a.SEXE and c.SEXD in ('1', '2')
order by case b.POSITION when 5 THEN 'Diagnostic associé' when 3 then 'Diagnostic principal' when 1 then 'Diagnostic principal' 
when 4 then 'Diagnostic relié' when 2 then 'Diagnostic relié' end;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_IDA23C02
AS 
select distinct a.NAS as IEP,  a.NORSS, a.DP, b.CDCCAM from
(select *  from PMSI.MCO_RSA_RSA where RSACMD = '23' and RSATYPE = 'C' and RSANUM = '02' and DUREE > 1 and ANSOR = '2020') a
inner join (select distinct NORSS, CDCCAM from PMSI.MCO_RSA_ACTES) b on
a.NORSS = b.NORSS  
inner join PMSI.OVA_DIAGINFO c on a.DP = c.DIAG and c.DGCPT669 = '0';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_IAD
AS 
select distinct a.NAS as IEP, a.NORSS, b.DIAG, case b.POSITION when 5 THEN 'Diagnostic associé' when 3 then 'Diagnostic principal' when 1 then 'Diagnostic principal' 
when 4 then 'Diagnostic relié' when 2 then 'Diagnostic relié' end as type_diagnostic, case when (AGEJR is not NULL) then round(AGEJR / 365.25, 0) ELSE AGEAN end as AGE,
a.AGEAN, a.AGEJR,
c.CL1V, c.CL2V, c.CL3V, c.CL4V, c.CL5V, c.CL6V from
PMSI.MCO_RSA_RSA a 
inner join PMSI.MCO_RSA_DIAGS b on a.NORSS = b.NORSS and a.ANSOR = '2020'
inner join PMSI.OVA_DIAGINFO c on b.DIAG = c.DIAG and (
(a.AGEJR < 29 and a.AGEJR is not NULL and c.CL1V = '1') OR
((a.AGEJR BETWEEN 29 and 364) and c.CL2V = '1') OR
((((a.AGEJR > 364 and a.AGEJR is not NULL) or a.AGEAN < 10)) and c.CL3V = '1') OR
((a.AGEAN BETWEEN 10 and 19) and c.CL4V = '1') OR
((a.AGEAN BETWEEN 20 and 64) and c.CL5V = '1') OR
((a.AGEAN > 64) and c.CL6V = '1')
)
order by case b.POSITION when 5 THEN 'Diagnostic associé' when 3 then 'Diagnostic principal' when 1 then 'Diagnostic principal' 
when 4 then 'Diagnostic relié' when 2 then 'Diagnostic relié' end, AGE;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_GBSDA
AS 
select distinct a1.IEP, a1.NORSS, a1.GHM, a1.DP, a2.DIAG from (
select distinct a.NAS as IEP, a.NORSS, a.GHM, a.DP, sum(decode(c.BRULUREBIS, '0', 0, 1)) as nb from
PMSI.MCO_RSA_RSA a 
inner join PMSI.MCO_RSA_DIAGS b on a.NORSS = b.NORSS and a.ANSOR = '2020' and a.RSACMD = '22' and b.POSITION = 5
left join PMSI.OVA_DIAGINFO c on b.DIAG = c.DIAG and c.BRULUREBIS = '0' 
group by a.NAS , a.NORSS, a.GHM, a.DP
having sum(decode(c.BRULUREBIS, '0', 0, 1)) = 0
) a1 
inner join PMSI.MCO_RSA_DIAGS a2 on  a1.NORSS = a2.NORSS and a2.POSITION = 5;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DRI
AS 
select distinct a.NAS as IEP, a.NORSS, a.GHM, a.DUREE, a.DP, a.DR, case when c.IMPRECIS = '1' THEN '1 - DR imprécis' ELSE '2 - DR très imprécis' END as niveau_imprecision from
PMSI.MCO_RSA_RSA a 
inner join PMSI.OVA_DIAGINFO c on a.DR = c.DIAG and c.IMPRECIS <> '0' and a.ANSOR = '2020';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DRDPNZ
AS 
select distinct a.NAS as IEP, a.NORSS, a.GHM, a.DUREE, a.DP, a.DR from
PMSI.MCO_RSA_RSA a where a.ANSOR = '2020' and (substr(a.DP,1,1) <> 'Z' OR a.DP is NULL) and a.DR is not NULL;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DRAA
AS 
select distinct a.NAS as IEP, a.NORSS, a.GHM, a.DUREE, a.DP, a.DR from
PMSI.MCO_RSA_RSA a 
inner join PMSI.OVA_DIAGINFO b on a.DR = b.DIAG and b.AFFAIG = '1' and  a.ANSOR = '2020';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DPZSL
AS 
select distinct a.NAS as IEP,  a.NORSS, a.DP from
(select *  from PMSI.MCO_RSA_RSA where ANSOR = '2020' and substr(DP,1,1) = 'Z' and DUREE > 15 and RSACMD <> '28' and DP not in ('Z515', 'Z431', 'Z432', 'Z433') and substr(DP,1,3) <> 'Z50') a;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DPZDC
AS 
select distinct a.NAS as IEP,  a.NORSS, a.DP from
(select *  from PMSI.MCO_RSA_RSA where ANSOR = '2020' and substr(DP,1,1) = 'Z' and SCHPMSI = '9' and DP not in ('Z515') and substr(DP,1,3) <> 'Z52') a;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DPZAC
AS 
select distinct a.NAS as IEP, a.NORSS, a.GHM, a.DUREE, a.DP, a.DR from
PMSI.MCO_RSA_RSA a 
inner join PMSI.OVA_DIAGINFO b on a.DP = b.DIAG and b.ZAFFCHR = '1' and  a.ANSOR = '2020' and substr(a.DP,1,1) = 'Z' and DR is NULL;


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DPR
AS 
select distinct a.NAS as IEP,  a.NORSS, a.DP from
(select *  from PMSI.MCO_RSA_RSA where ANSOR = '2020') a
inner join PMSI.OVA_DIAGINFO c on a.DP = c.DIAG and c.ZINHAB = '1';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DPNZ
AS 
select distinct a.NAS as IEP, a.GHM, a.DUREE, a.NORSS, a.DP, b.CDCCAM from
PMSI.MCO_RSA_RSA a 
inner join PMSI.MCO_RSA_ACTES b on a.NORSS = b.NORSS and a.ANSOR = '2020' and a.DUREE < 6 and  
substr(a.DP,1,3) not in ('M00', 'M01', 'M86', 'M96', 'T80', 'T81', 'T82', 'T83', 'T84', 'T85', 'T86', 'T87', 'T88') and substr(DP,1,1) <> 'Z'
inner join PMSI.OVA_CCAMINFO c on b.CDCCAM = c.CDCCAM and c.REQZ = '1';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DPI
AS 
select distinct a.NAS as IEP,  a.NORSS, a.DP, a.DR,  case when c.IMPRECIS = '1' THEN '1 - DP imprécis' ELSE '2 - DP très imprécis' END as niveau_imprecision from
(select *  from PMSI.MCO_RSA_RSA where ANSOR = '2020') a
inner join PMSI.OVA_DIAGINFO c on a.DP = c.DIAG and c.IMPRECIS <> '0';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DAT_B
AS 
select distinct a.NAS as IEP, a.NORSS, a.DIAG, b.DP from
PMSI.MCO_RSA_DIAGS a 
inner join PMSI.MCO_RSA_RSA b on a.NORSS = b.NORSS and a.ANSOR = '2020' and a.POSITION = '5' 
inner join PMSI.OVA_DIAGINFO c on a.DIAG = c.DIAG and c.TINTOX = '1'  
inner join PMSI.OVA_DIAGINFO c2 on b.DP = c2.DIAG and c2.TINTOX = '0';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DAR
AS 
select distinct a.NAS as IEP, a.NORSS, a.GHM, a.DUREE, a.DP, a.DR, b.DIAG from
PMSI.MCO_RSA_RSA a 
inner join PMSI.MCO_RSA_DIAGS b on a.NORSS = b.NORSS and a.ANSOR = '2020' and b.POSITION = '5'
inner join PMSI.OVA_DIAGINFO c on b.DIAG = c.DIAG and c.RARE <> '0';


CREATE OR REPLACE VIEW EPMSI_1_Q_5_DAI
AS 
select distinct a.NAS as IEP, a.NORSS, a.GHM, a.DUREE, a.DP, a.DR, b.DIAG, case when c.IMPRECIS = '1' THEN '1 - DAS Imprécis' ELSE '2 - DAS très imprécis' END as niveau_imprecision from
PMSI.MCO_RSA_RSA a 
inner join PMSI.MCO_RSA_DIAGS b on a.NORSS = b.NORSS and a.ANSOR = '2020' and b.POSITION = '5'
inner join PMSI.OVA_DIAGINFO c on b.DIAG = c.DIAG and c.IMPRECIS <> '0';


CREATE OR REPLACE VIEW EPMSI_1_Q_4_NEXH
AS 
select NORSS, GHM, DUREE, NBJRBS
from PMSI.MCO_RSA_RSA WHERE 
NBJRBS > 30 and ANSOR = '2020' and RSACOMPX in ('Z', '1', '2', 'A', 'B') and GHM <> '23Z02Z';


CREATE OR REPLACE VIEW EPMSI_1_Q_13_DMIMAT_B
AS 
select a."NOFINESS",a."TYPEPREST",a."NAS",a."DTPOSE",a."CDLPP",a."NBPOSE",a."PRIX",a."ANSOR", 2 as DOSE_MAX from 
PMSI.MCO_RSA_DMI a where
CDLPP = '3186838' and ANSOR = '2020' and NBPOSE > 2;


CREATE OR REPLACE VIEW EPMSI_1_Q_13_DMIMAT_A
AS 
select NAS, NORSS, CDUCD,  substr(CDUCD,6,7) as CDUCD7, sum(NBADM) as somme_adm, 
case substr(CDUCD,6,7) when '9213737' THEN 10 when '9293216' THEN 12 when '9418787' THEN 8 when '9427467' then 4 END as DOSE_MAX from 
PMSI.MCO_RSA_MED 
where ANSOR = '2020' and substr(CDUCD,6,7) in ('9213737', '9293216', '9418787', '9427467')
group by NAS, NORSS, CDUCD
having 
(sum(NBADM) > 10 and substr(CDUCD,6,7) = '9213737') OR 
(sum(NBADM) > 12 and substr(CDUCD,6,7) = '9293216') OR 
(sum(NBADM) > 8 and substr(CDUCD,6,7)  = '9418787') OR
(sum(NBADM) > 4 and substr(CDUCD,6,7)  = '9427467')
order by CDUCD, sum(NBADM)  desc;


CREATE OR REPLACE VIEW DMI_CCAM_STAT_PROP_STEPS
AS 
select ROUND(PROP_ASSOCIATIONS,2) as prop_steps, count(*) as taille_liste, sum(NB_DMI_ACTES) as NB_DMI_ACTES, sum(NB_ACTES) as NB_ACTES
from PMSI.DMI_CCAM_STAT
group by ROUND(PROP_ASSOCIATIONS,2) 
order by ROUND(PROP_ASSOCIATIONS,2) desc;


CREATE OR REPLACE VIEW DMI_CCAM_STAT
AS 
select distinct b.periode, 
case WHEN round(a.nb_dmi_actes / b.nb_actes,3) >= 0.7 THEN 'Très probable (> 0.7)' 
     WHEN round(a.nb_dmi_actes / b.nb_actes,3) >= 0.5 THEN 'Probable (> 0.5)'
     WHEN round(a.nb_dmi_actes / b.nb_actes,3) >= 0.3 THEN 'Assez probable (> 0.3)'
     WHEN round(a.nb_dmi_actes / b.nb_actes,3) < 0.3 THEN 'Peu probable (< 0.3)' END CATEG_PROB,   
a.CDCCAM, l.LIBELLE_LONG, a.NB_DMI_ACTES,round(a.MONTANT_DMI / a.NB_DMI_ACTES,1) as MONTANT_DMI , b.nb_actes , b.NB_ACTES - a.NB_DMI_ACTES as NB_DELTA, round(a.nb_dmi_actes / b.nb_actes,3) as prop_associations from
(select CDCCAM, count(distinct NORUM) as nb_dmi_actes, sum(PRIX) as MONTANT_DMI from 
PMSI.DMI_CCAM_ASSOCIATIONS where ANSOR < '2020'
group by CDCCAM) a
inner join (
select CDCCAM, count(distinct NORUM) as nb_actes , min(ANSOR) ||' -- '|| max(ANSOR) as periode from
PMSI.MCO_RUM_ACTES where ANSOR < '2020'
group by CDCCAM  ) b
on a.CDCCAM = b.CDCCAM
inner join PMSI.REF_CCAM_ICR icr on a.CDCCAM = icr.CODE and icr.CLASSANT = 'Y'
left join PMSI.REF_CCAM_ACTES l on a.CDCCAM = l.CODE
where b.NB_ACTES - a.NB_DMI_ACTES > 0
order by NB_DMI_ACTES desc;


CREATE OR REPLACE VIEW DMI_CCAM_LISTE_SANS_DMI
AS 
select distinct a.ANSOR, s.CATEG_PROB, a.NAS, a.NORUM, a.DTACTE, a.CDCCAM, s.LIBELLE_LONG, s.MONTANT_DMI, s.PROP_ASSOCIATIONS, s.NB_ACTES, s.NB_DMI_ACTES from PMSI.MCO_RUM_ACTES a
inner join (select * from PMSI.DMI_CCAM_STAT where PROP_ASSOCIATIONS >= 0.6) s on a.CDCCAM = s.CDCCAM and a.ANSOR = '2020' and a.ACT = '1'
left join PMSI.MCO_RUM_DMI d on a.NAS = d.NAS /*and a.DTACTE = d.DTPOSE*/ where CDLPP is NULL
order by PROP_ASSOCIATIONS desc;


CREATE OR REPLACE VIEW DMI_CCAM_ASSOCIATIONS
AS 
select distinct a.NAS, b.NORSS, b.NORUM, a.CDLPP, a.PRIX, b.CDCCAM , b.DTACTE, a.ANSOR from 
PMSI.MCO_RUM_DMI a inner join PMSI.MCO_RUM_ACTES b on a.NAS = b.NAS and a.DTPOSE = b.DTACTE and 
CDCCAM not like 'YYYY%' and 
CDCCAM not like 'ZZ%' and 
CDCCAM not like 'ZBQK%' and 
CDCCAM not like 'GELD%' and 
CDCCAM not like 'GLLD%' and 
CDCCAM not like 'DEQP%' and 
CDCCAM <> 'ANRP001' and
ACT = '1'
and substr(CDCCAM,4,1) not in ('X', 'K', 'H');


